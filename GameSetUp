package computer_master_game;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.image.BufferStrategy;

import computer_master_display.Display;
import computer_master_manager.gameManager;




public class gameSetUp implements Runnable{
	
	
	// Değişkenler 
	private Thread thread;
	private Display display;
	private String title;
	private int width,height;
	private BufferStrategy buffer;
	private Graphics g;
	private boolean running = true;
	private gameManager manager;

	public gameSetUp(String title,int width,int height){
		this.title = title;
		this.width = width;
		this.height = height;
	
		
	}
	
	public void init(){ // işlem sırası 4
	// display nesnesi oluşturulur
	display = new Display(title, width, height);
	
	// gameManager nesnesi oluşturulcak
	manager = new gameManager();
	manager.init();

	}
	
	
	public synchronized void start(){
		if(thread == null){
		//işlem sırası 2	
		// threat start olduktan sonra otomatik run fonksiyonu çalışır
			
			thread = new Thread(this);
			thread.start();
			
			
		}
	}
	public synchronized void stop(){
		try {
			thread.join();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}
	public void tick(){
		manager.tick();
	
	}
	
	public void render(){
		/* 
		 * Bir görüntü oluştururken diğer 2 görüntününde arkada
		 * hazır olmasını sağlıyoruz
		 * böylece süreklilik sağlanmış oluyor
		 */
		buffer = Display.canvas.getBufferStrategy();
		if(buffer == null){
			display.canvas.createBufferStrategy(3);
			return;
		}
		g = buffer.getDrawGraphics();
		g.clearRect(0, 0, width, height);
		
		manager.render(g);
		
		buffer.show();
		g.dispose();
		
	}
	
	@Override
	public void run() { // işlem sırası 3. // 1 kere çalıştırıyor 
		init(); 
		
		int fps = 100;
		double timePerTick = 1000000000/fps;	
		double delta = 0;
		long outLoopTime = System.nanoTime();
	
		while(running){
			
			delta = delta + (System.nanoTime()-outLoopTime)/timePerTick;
			outLoopTime = System.nanoTime();
		
	
			if(delta >=1 ){
				
				tick();
				render();	
				delta--;
				
				
			}
			
		}
		
		
	}
	
	
	
	
}
